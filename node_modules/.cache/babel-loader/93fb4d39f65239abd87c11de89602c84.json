{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\armon\\\\Projects\\\\homework\\\\Clicky-Game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Container from \"./components/Container\";\nimport Row from \"./components/Row/Row\";\nimport Col from \"./components/Col\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport mcu from \"./mcu.json\";\nimport MovieCard from \"./components/MovieCard/index\";\nimport theme from \"./components/images/marvel-studios-fanfare-hd.mp3\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mcu,\n      score: 0,\n      highScore: 0,\n      picks: mcu\n    };\n\n    this.gameOver = newHighScore => {\n      // this.setState({ initialState.highScore: this.state.highScore})\n      this.setState({\n        mcu,\n        score: 0,\n        highScore: newHighScore,\n        picks: mcu\n      });\n    };\n\n    this.theme = () => {\n      let themeMusic = new Audio(theme);\n\n      if (themeMusic.play === true) {\n        themeMusic.pause();\n      }\n\n      themeMusic.play();\n    };\n\n    this.picker = id => {\n      if (this.state.mcu.some(element => element.id === id)) {\n        this.scored();\n        const mcu = this.state.mcu.filter(movie => movie.id !== id);\n        const picks = this.state.picks.sort(function (a, b) {\n          return 0.5 - Math.random();\n        });\n        console.log(mcu);\n        this.setState({\n          mcu,\n          picks\n        });\n      } else {\n        console.log('wrong answer');\n        this.gameOver(this.state.highScore);\n      }\n    };\n\n    this.scored = () => {\n      console.log(this.state);\n      let _this$state = this.state,\n          score = _this$state.score,\n          highScore = _this$state.highScore;\n      score = score + 1;\n\n      if (score > highScore) {\n        this.setState({\n          highScore: score,\n          score: score\n        });\n        console.log(this.state.score, this.state.highScore);\n      } else {\n        this.setState({\n          score: score\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Navbar, {\n      score: this.state.score,\n      highScore: this.state.highScore,\n      theme: this.theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex flex-wrap justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.picks.map(movie => React.createElement(MovieCard, {\n      scored: this.scored,\n      picker: this.picker,\n      id: movie.id,\n      key: movie.id,\n      name: movie.name,\n      image: movie.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), \"}\"))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/armon/Projects/homework/Clicky-Game/src/App.js"],"names":["React","Component","Container","Row","Col","Navbar","Jumbotron","mcu","MovieCard","theme","App","state","score","highScore","picks","gameOver","newHighScore","setState","themeMusic","Audio","play","pause","picker","id","some","element","scored","filter","movie","sort","a","b","Math","random","console","log","render","map","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"./components/Container\";\nimport Row from \"./components/Row/Row\";\nimport Col from \"./components/Col\";\nimport Navbar from \"./components/Navbar\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport mcu from \"./mcu.json\";\nimport MovieCard from \"./components/MovieCard/index\";\nimport theme from \"./components/images/marvel-studios-fanfare-hd.mp3\"\n\nclass App extends Component {\n  \n  state = {\n    mcu,\n    score: 0,\n    highScore: 0,\n    picks: mcu\n  }\n  \n  gameOver = (newHighScore) => {    \n    // this.setState({ initialState.highScore: this.state.highScore})\n    this.setState({\n      mcu,\n      score: 0,\n      highScore: newHighScore,\n      picks: mcu\n    })\n  }\n  \n  theme = () => {\n    let themeMusic = new Audio(theme)\n    if (themeMusic.play === true) {\n      themeMusic.pause()\n    }\n    themeMusic.play()\n  }\n\n  picker = id => {\n    if (this.state.mcu.some( element => element.id === id)) {\n      this.scored()\n      const mcu = this.state.mcu.filter(movie => movie.id !== id)\n      const picks = this.state.picks.sort(function(a, b){return 0.5 - Math.random()})\n      console.log(mcu)\n      this.setState({ mcu, picks }) \n    } else {\n      console.log('wrong answer')\n      this.gameOver(this.state.highScore)\n    }\n    \n  }\n  \n  scored = () => {\n    console.log(this.state)\n    let { score, highScore } = this.state\n    score = score + 1\n    if (score > highScore) {\n      this.setState(\n        { highScore: score,\n          score: score }\n          )\n          console.log(this.state.score, this.state.highScore)\n        } else {\n          this.setState({score: score})\n        }\n      }\n      \n      render() {\n        return (\n          <>\n        <Navbar score={this.state.score}\n        highScore={this.state.highScore}\n        theme={this.theme}\n        />\n        <Container>\n          <Jumbotron />\n          <Row>\n            <Col>\n            <Container>\n              <div className=\"d-flex flex-wrap justify-content-center\">\n              {this.state.picks.map(movie => (\n                <MovieCard\n                scored={this.scored}\n                picker={this.picker}\n                id={movie.id}\n                key={movie.id}\n                name={movie.name}\n                image={movie.image}\n                />\n              ))}\n\n              }\n              </div>\n            </Container>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}