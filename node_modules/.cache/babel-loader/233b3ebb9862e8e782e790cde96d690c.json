{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\armon\\\\Projects\\\\homework\\\\Clicky-Game\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Wrapper from './components/Wrapper';\nimport Navbar from './components/Navbar';\nimport mcu from './components/MCU';\nimport MovieCard from './components/MovieCard/index';\nimport theme from './components/images/marvel-studios-fanfare-hd.mp3';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.gameOver = newHighScore => {\n      // this.setState({ initialState.highScore: this.state.highScore})\n      this.setState({\n        mcu,\n        score: 0,\n        highScore: newHighScore,\n        picks: mcu\n      });\n    };\n\n    this.theme = () => {\n      const themeMusic = new Audio(theme);\n\n      if (themeMusic.play === true) {\n        themeMusic.pause();\n      }\n\n      themeMusic.play();\n    };\n\n    this.picker = id => {\n      if (this.state.mcu.some(element => element.id === id)) {\n        this.scored(); // eslint-disable-next-line no-shadow\n\n        const mcu = this.state.mcu.filter(movie => movie.id !== id);\n        const picks = this.state.picks.sort(function (a, b) {\n          return 0.5 - Math.random();\n        });\n        this.setState({\n          mcu,\n          picks\n        });\n        this.setState(prevState => ({\n          mcu: prevState.mcu,\n          picks: prevState.picks\n        }));\n      } else {\n        alert(`Game Over, your score was ${this.state.score}. Click the screen to play again!!!`);\n        this.gameOver(this.state.highScore);\n      }\n    };\n\n    this.scored = () => {\n      let {\n        score\n      } = this.state;\n      const {\n        highScore\n      } = this.state;\n      score += 1;\n\n      if (score > highScore) {\n        this.setState({\n          highScore: score,\n          score\n        });\n      } else {\n        this.setState({\n          score\n        });\n      }\n    };\n\n    this.state = {\n      mcu,\n      score: 0,\n      highScore: 0,\n      picks: mcu\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n      score: this.state.score,\n      highScore: this.state.highScore,\n      theme: this.theme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Wrapper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex flex-wrap justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, this.state.picks.map(({\n      id,\n      name,\n      image\n    }) => /*#__PURE__*/React.createElement(MovieCard, {\n      scored: this.scored,\n      picker: this.picker,\n      id: id,\n      key: id,\n      name: name,\n      image: image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/armon/Projects/homework/Clicky-Game/src/App.js"],"names":["React","Component","Wrapper","Navbar","mcu","MovieCard","theme","App","constructor","props","gameOver","newHighScore","setState","score","highScore","picks","themeMusic","Audio","play","pause","picker","id","state","some","element","scored","filter","movie","sort","a","b","Math","random","prevState","alert","render","map","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Wrapper from './components/Wrapper'\nimport Navbar from './components/Navbar'\nimport mcu from './components/MCU'\nimport MovieCard from './components/MovieCard/index'\nimport theme from './components/images/marvel-studios-fanfare-hd.mp3'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      mcu,\n      score: 0,\n      highScore: 0,\n      picks: mcu\n    }\n  }\n\n  gameOver = newHighScore => {\n    // this.setState({ initialState.highScore: this.state.highScore})\n    this.setState({\n      mcu,\n      score: 0,\n      highScore: newHighScore,\n      picks: mcu\n    })\n  }\n\n  theme = () => {\n    const themeMusic = new Audio(theme)\n    if (themeMusic.play === true) {\n      themeMusic.pause()\n    }\n    themeMusic.play()\n  }\n\n  picker = id => {\n    if (this.state.mcu.some(element => element.id === id)) {\n      this.scored()\n      // eslint-disable-next-line no-shadow\n      const mcu = this.state.mcu.filter(movie => movie.id !== id)\n\n      const picks = this.state.picks.sort(function (a, b) {\n        return 0.5 - Math.random()\n      })\n      this.setState({ mcu, picks })\n      this.setState(prevState => ({\n        mcu: prevState.mcu,\n        picks: prevState.picks\n      }))\n    } else {\n      alert(\n        `Game Over, your score was ${this.state.score}. Click the screen to play again!!!`\n      )\n      this.gameOver(this.state.highScore)\n    }\n  }\n\n  scored = () => {\n    let { score } = this.state\n    const { highScore } = this.state\n    score += 1\n    if (score > highScore) {\n      this.setState({ highScore: score, score })\n    } else {\n      this.setState({ score })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar\n          score={this.state.score}\n          highScore={this.state.highScore}\n          theme={this.theme}\n        />\n        <Wrapper>\n          <div className=\"d-flex flex-wrap justify-content-center\">\n            {this.state.picks.map(({ id, name, image }) => (\n              <MovieCard\n                scored={this.scored}\n                picker={this.picker}\n                id={id}\n                key={id}\n                name={name}\n                image={image}\n              />\n            ))}\n          </div>\n        </Wrapper>\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}