{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\armon\\\\Projects\\\\homework\\\\Clicky-Game\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport Wrapper from './';\nimport Container from './components/Container';\nimport Row from './components/Row/Row';\nimport Col from './components/Col';\nimport Navbar from './components/Navbar';\nimport Jumbotron from './components/Jumbotron';\nimport mcu from './components/MCU';\nimport MovieCard from './components/MovieCard/index';\nimport theme from './components/images/marvel-studios-fanfare-hd.mp3';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      mcu,\n      score: 0,\n      highScore: 0,\n      picks: mcu\n    };\n\n    this.gameOver = newHighScore => {\n      // this.setState({ initialState.highScore: this.state.highScore})\n      this.setState({\n        mcu,\n        score: 0,\n        highScore: newHighScore,\n        picks: mcu\n      });\n    };\n\n    this.theme = () => {\n      let themeMusic = new Audio(theme);\n\n      if (themeMusic.play === true) {\n        themeMusic.pause();\n      }\n\n      themeMusic.play();\n    };\n\n    this.picker = id => {\n      if (this.state.mcu.some(element => element.id === id)) {\n        this.scored();\n        const mcu = this.state.mcu.filter(movie => movie.id !== id);\n        const picks = this.state.picks.sort(function (a, b) {\n          return 0.5 - Math.random();\n        });\n        this.setState({\n          mcu,\n          picks\n        });\n      } else {\n        alert(`Game Over, your score was ${this.state.score}. Click the screen to play again!!!`);\n        this.gameOver(this.state.highScore);\n      }\n    };\n\n    this.scored = () => {\n      let _this$state = this.state,\n          score = _this$state.score,\n          highScore = _this$state.highScore;\n      score = score + 1;\n\n      if (score > highScore) {\n        this.setState({\n          highScore: score,\n          score: score\n        });\n      } else {\n        this.setState({\n          score: score\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(Navbar, {\n      score: this.state.score,\n      highScore: this.state.highScore,\n      theme: this.theme,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(Col, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"d-flex flex-wrap justify-content-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, this.state.picks.map(({\n      id,\n      name,\n      image\n    }) => React.createElement(MovieCard, {\n      scored: this.scored,\n      picker: this.picker,\n      id: id,\n      key: id,\n      name: name,\n      image: image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }))))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/armon/Projects/homework/Clicky-Game/src/App.js"],"names":["React","Component","Wrapper","Container","Row","Col","Navbar","Jumbotron","mcu","MovieCard","theme","App","state","score","highScore","picks","gameOver","newHighScore","setState","themeMusic","Audio","play","pause","picker","id","some","element","scored","filter","movie","sort","a","b","Math","random","alert","render","map","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Wrapper from './'\nimport Container from './components/Container'\nimport Row from './components/Row/Row'\nimport Col from './components/Col'\nimport Navbar from './components/Navbar'\nimport Jumbotron from './components/Jumbotron'\nimport mcu from './components/MCU'\nimport MovieCard from './components/MovieCard/index'\nimport theme from './components/images/marvel-studios-fanfare-hd.mp3'\n\nclass App extends Component {\n  state = {\n    mcu,\n    score: 0,\n    highScore: 0,\n    picks: mcu\n  }\n\n  gameOver = newHighScore => {\n    // this.setState({ initialState.highScore: this.state.highScore})\n    this.setState({\n      mcu,\n      score: 0,\n      highScore: newHighScore,\n      picks: mcu\n    })\n  }\n\n  theme = () => {\n    let themeMusic = new Audio(theme)\n    if (themeMusic.play === true) {\n      themeMusic.pause()\n    }\n    themeMusic.play()\n  }\n\n  picker = id => {\n    if (this.state.mcu.some(element => element.id === id)) {\n      this.scored()\n      const mcu = this.state.mcu.filter(movie => movie.id !== id)\n      const picks = this.state.picks.sort(function(a, b) {\n        return 0.5 - Math.random()\n      })\n      this.setState({ mcu, picks })\n    } else {\n      alert(`Game Over, your score was ${this.state.score}. Click the screen to play again!!!`)\n      this.gameOver(this.state.highScore)\n    }\n  }\n\n  scored = () => {\n    let { score, highScore } = this.state\n    score = score + 1\n    if (score > highScore) {\n      this.setState({ highScore: score, score: score })\n    } else {\n      this.setState({ score: score })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar score={this.state.score} highScore={this.state.highScore} theme={this.theme} />\n        <Container>\n          <Jumbotron />\n          <Row>\n            <Col>\n              <Container>\n                <div className='d-flex flex-wrap justify-content-center'>\n                  {this.state.picks.map(({id, name, image}) => (\n                    <MovieCard\n                      scored={this.scored}\n                      picker={this.picker}\n                      id={id}\n                      key={id}\n                      name={name}\n                      image={image}\n                    />\n                  ))}\n                </div>\n              </Container>\n            </Col>\n          </Row>\n        </Container>\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}